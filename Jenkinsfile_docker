pipeline {
    agent any
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages { 
        stage('build') {
            steps {
                script{
                    try {
                        sh "docker build -t wruper/mvn_tests:latest . -f Dockerfile"
                    } catch (error) {
                        notification("build", "failure")
                            sh "exit 1"   
                    } finally {
                        notification("build", "success")
                    }
                }
            }
        } 
        stage('deploy-staging') {
            steps {
                script{
                    try {
                        deploy("Staging")
                    } catch (error) {
                        notification("staging_deployment", "failure")
                            sh "exit 1"   
                    } finally {
                        notification("staging_deployment", "success")
                    }
                }
            }
        }
        stage('test-staging') {
            steps {
                script{
                    try {
                        test("Staging")
                    } catch (error) {
                        notification("staging_test", "failure")
                            sh "exit 1"   
                    } finally {
                        notification("staging_test", "success")
                    }
                }
            }
        }
        stage('deploy-prod') {
            steps {
                script{
                    try {
                        deploy("Production")
                    } catch (error) {
                        notification("deploy_production", "failure")
                            sh "exit 1"   
                    } finally {
                        notification("deploy_production", "success")
                    }
                }
            }
        }
        stage('test-prod') {
            steps {
                script{
                    try {
                        test("Production")
                    } catch (error) {
                        notification("test_production", "failure")
                            sh "exit 1"   
                    } finally {
                        notification("test_production", "success")
                    }
                }
            }
        }
   }
}


def deploy(String env){
    echo "Deployment to ${env} triggered.."
   }

def test(String env){
    echo "Running tests to ${env}.."
    }


def notification(String env, String status) {
    if (status == "success") {
        sh "bash send_notification.sh ${env} 0"
    } else {
        sh "bash send_notification.sh ${env} 1"
    }
}