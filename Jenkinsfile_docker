pipeline {
    agent any
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages { 
        stage('build') {
            steps {
                sh "docker-compose rm -f" 
            }
                post{
                    success{
                        sh "bash send_notification.sh build 0"
                }
                    failure{
                        sh "bash send_notification.sh build 1"
                }
            }
        }
        stage('deploy-staging') {
            steps {
                script{
                    deploy("Staging")
                }
            }
                post{
                    success{
                        sh "bash send_notification.sh deploy_staging 0"
                }
                    failure{
                        sh "bash send_notification.sh deploy_staging 1"
                }
            }
    }
        stage('test-staging') {
            steps {
                script{
                    test("Staging")
                    startSelenium()
                    wait(20)
                    closeSeleniumContainers()
                }
            }
                post{
                    success{
                        sh "bash send_notification.sh testing_staging 0"
                }
                    failure{
                        sh "bash send_notification.sh testing_staging 1"
                }
            }
        }
        stage('deploy-prod') {
            steps {
                script{
                    deploy("Production")
                }
            }
                post{
                    success{
                        sh "bash send_notification.sh deploying_production 0"
                }
                    failure{
                        sh "bash send_notification.sh deploying_production 1"
                }
            }
        }
        stage('test-prod') {
            steps {
                script{
                    test("Production")
                    startSelenium()
                    wait(20)
                    closeSeleniumContainers()
                }
            }
                post{
                    success{
                        sh "bash send_notification.sh testing_production 0"
                }
                    failure{
                        sh "bash send_notification.sh testing_production 1"
                }
            }
        }
    }
}

def deploy(String environment){
        echo "Deployment to ${environment} triggered.."
}

def test(String environment){
    echo "Running tests to ${environment}.."

}

def startSelenium(){
    sh "docker-compose up"
}

def closeSeleniumContainers(){
    sh "docker-compose rm -f"
}


