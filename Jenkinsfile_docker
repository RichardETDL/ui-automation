pipeline {
    agent any
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages { 
        stage('build') {
            steps {
                sh "docker build -t wruper/mvn_tests:latest . -f Dockerfile"
                
            }
       post{
            success{
                sh "send_notification.sh 'dev deployment' '0'"
            }
            failure{
                sh "send_notification.sh 'dev deployment' '1'"
            }
        }
    }
        stage('deploy-staging') {
            steps {
                script{
                    deploy("Staging")
                }
            }
        
         post{
            success{
                sh "send_notification.sh “dev deployment” 0"
            }
            failure{
                sh "send_notification.sh “dev deployment” 1"
            }
        }
    }
        stage('test-staging') {
            steps {
                script{
                    test("Staging")
                }
            }
        
        post{
            success{
                sh "send_notification.sh 'dev deployment' 0"
            }
            failure{
                sh "send_notification.sh 'dev deployment' 1"
            }
        }
    }
        stage('deploy-prod') {
            steps {
                script{
                    deploy("Production")
                }
            }
        post{
            success{
                sh "send_notification.sh “dev deployment” 0"
            }
            failure{
                sh "send_notification.sh “dev deployment” 1"
            }
        }
    }
        stage('test-prod') {
            steps {
                script{
                    test("Production")
                }
            }
        post{
            success{
                sh "send_notification.sh “dev deployment” 0"
            }
            failure{
                sh "send_notification.sh “dev deployment” 1"
            }
        }
    }
   }
}


def deploy(String environment){
    echo "Deployment to ${environment} triggered.."
   }

def test(String environment){
    echo "Running tests to ${environment}.."
    }
