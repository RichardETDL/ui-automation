pipeline {
    agent any
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages { 
        stage('build') {
            steps {
                build()
            }
                post{
                    success{
                        sh "bash send_notification.sh build 0"
                }
                    failure{
                        sh "bash send_notification.sh build 1"
                }
            }
        }
        stage('deploy-staging') {
            steps {
                script{
                    deploy("Staging")
                }
            }
                post{
                    success{
                        sh "bash send_notification.sh deploy_staging 0"
                }
                    failure{
                        sh "bash send_notification.sh deploy_staging 1"
                }
            }
    }
        stage('test-staging') {
            steps {
                script{
                    test("Staging")
                    createSelenium()
                    testSeleniumChrome()
                    testSeleniumFirefox()
                    removeSelenium()    

                }
            }
                post{
                    success{
                        sh "bash send_notification.sh testing_staging 0"
                }
                    failure{
                        sh "bash send_notification.sh testing_staging 1"
                }
            }
        }
        stage('deploy-prod') {
            steps {
                script{
                    deploy("Production")
                }
            }
                post{
                    success{
                        sh "bash send_notification.sh deploying_production 0"
                }
                    failure{
                        sh "bash send_notification.sh deploying_production 1"
                }
            }
        }
        stage('test-prod') {
            steps {
                script{
                    test("Production")
                }
            }
                post{
                    success{
                        sh "bash send_notification.sh testing_production 0"
                }
                    failure{
                        sh "bash send_notification.sh testing_production 1"
                }
            }
        }
    }
}

def deploy(String environment){
        echo "Deployment to ${environment} triggered.."
}

def test(String environment){
    echo "Running tests to ${environment}.."
}

def build(){
    echo "Building image"
    sh " docker build -t wruper/mvn_tests:latest . Dockerfile "
}

def createSelenium() {
    echo "Building Selenium"
    echo "Building Selenium-hub"
    sh "docker run -d -p 4444:4444 --net test-automation-setup --rm --name hub selenium/hub:4.1.0-20211209"
    echo "Building Firefox"
    sh "docker run -d --rm --name firefox --net test-automation-setup -v /dev/shm:/dev/shm -e HUB_HOST=selenium-hub -e HUB_PORT=4444 selenium/node-firefox:3.141.59-20210929"
    echo "Building Chrome"
    sh "docker run -d --rm --name chrome --net test-automation-setup -v /dev/shm:/dev/shm -e HUB_HOST=selenium-hub -e HUB_PORT=4444 selenium/node-chrome:3.141.59-20210929"
}

def removeSelenium(){
    echo "Removing Selenium-hub, Firefox, Chrome"
    sh "docker rm -f hub"
    sh "docker rm -f firefox"
    sh "docker rm -f chrome"
}

def testSeleniumChrome(){
    sh "docker run -it --network=test-automation-setup mvn_tests mvn clean test -Dbrowser=chrome -DgridURL=hub:4444"
}

def testSeleniumFirefox(){
    sh "docker run -it --network=test-automation-setup mvn_tests mvn clean test -Dbrowser=firefox -DgridURL=hub:4444"
}



